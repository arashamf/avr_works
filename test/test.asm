.INCLUDE "m8def.inc" //загрузка предопределений дл€ ATmega8
.LIST                           ; включить генерацию листинга

.CSEG                           ; начало сегмента кода ((FLASH))
.ORG 0x0000                     ; начальное значение дл€ адресации пам€ти

; -- инициализаци€ стека --
LDI R16, Low(RAMEND)  ; младший байт конечного адреса ќ«” в R16 (LDI - «агрузить непосредственное значение)
OUT SPL, R16          ; установка младшего байта указател€ стека (OUT - «аписать данные из регистра в порт I/O)
LDI R16, High(RAMEND) ; старший байт конечного адреса ќ«” в R16
OUT SPH, R16          ; установка старшего байта указател€ стека

.equ Delay = 5        ; установка константы времени задержки (.equ - присвоение выражени€ или константы какой либо символической метке)
; -- устанавливаем пины PD0 и PD1 порта PORTD (PD) на вывод --
LDI R16, 0b00000011   ; поместим в регистр R16 число 3 (0x3)
OUT DDRD, R16         ; загрузим значение из регистра R16 в порт DDRD

; -- основной цикл программы --
Start:
    SBI PORTD, PORTD0 ; подача на пин PD0 высокого уровн€ (SBI - ”становить бит в регистр I/O)
    CBI PORTD, PORTD1 ; подача на пин PD1 низкого уровн€ (CBI - ќчистить бит в регистре I/O)
    RCALL Wait        ; вызываем подпрограмму задержки по времени (RCALL - вызов подпрограммы относительно)
    SBI PORTD, PORTD1 ; подача на пин PD1 высокого уровн€
    CBI PORTD, PORTD0 ; подача на пин PD0 высокого уровн€
    RCALL Wait
    RJMP Start        ; возврат к метке Start, повтор€ем все в цикле ( RJMP - перейти относительно)

; -- подпрограмма задержки по времени --
Wait:
    LDI  R17, Delay   ; загрузка константы дл€ задержки в регистр R17
WLoop0:  
    LDI  R18, 50      ; загружаем число 50 (0x32) в регистр R18
WLoop1:  
    LDI  R19, 0xC8    ; загружаем число 200 (0xC8, $C8) в регистр R19
WLoop2:  
    DEC  R19          ; уменьшаем значение в регистре R19 на 1
    BRNE WLoop2       ; возврат к WLoop2 если значение в R19 не равно 0 
    DEC  R18          ; уменьшаем значение в регистре R18 на 1
    BRNE WLoop1       ; возврат к WLoop1 если значение в R18 не равно 0
    DEC  R17          ; уменьшаем значение в регистре R17 на 1
    BRNE WLoop0       ; возврат к WLoop0 если значение в R17 не равно 0
RET                   ; возврат из подпрограммы Wait
